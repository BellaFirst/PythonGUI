
## 一个简单界面的编写
import sys #提供了访问由解释器使用或维护的变量和与解释器进行交互的函数
from PyQt5.QtWidgets import * #QtWidgets模块包含提供一组UI元素以创建经典桌面式用户界面的方法，可以让我们很方便地创建窗口对象。

# app=QApplication(sys.argv) #在PyQt5中，每个应用程序都必须实例化一个QApplication()
# win = QWidget() #创建了一个QWidget()对象，它是pyqt5中所有的图形用户界面的基类
# win.resize(450,150) #改变界面的尺寸
# win.move(0,300)     #改变界面的位置
# win.setWindowTitle('曹亚慧的计算器')  #为界面加题目
# win.show()  #使用QWidget对象的show()方法将创建的窗口显示出来
# sys.exit(app.exec_()) #调用应用程序对象的exec_()方法来运行程序的主循环，并使用sys.exit()方法确保程序能够完美的退出
 
## 使用面向对象的方式编写界面
class GUi(): #创建名为GUI的class
    def __init__(self):#初始化函数 调用initUI创建窗口
        self.initUI()#通过initUI创建窗口

    def initUI(self):
        self.win=QWidget()
        self.win.setWindowTitle('曹亚慧的计算器')

if __name__=="__main__":
    app=QApplication(sys.argv)
    gui=GUi()
    gui.win.show()
    sys.exit(app.exec_())

##除了使用原生的类，我们还能从pyqt5中继承一些模块，以此来获得相关模块的属性
#我们创建一个继承于QWidget()的类，那么它就拥有了QWidget()的方法和属性，这样我们就可以不实例化一个QWidget()对象而直接拥有QWidget()的属性
class GUi(QWidget):
    def __init__(self):
        #实例化super类，用来创建窗口
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle("曹亚慧的计算器")

if __name__=='__main__':
    app=QApplication(sys.argv)
    gui=GUi()
    gui.show()
    sys.exit(app.exec_())
    
##除了QtWidgets 模块拥有窗口的一些属性，QMainWindow模块也拥有窗口的一众属性，我们同样也可以通过继承它来为创建的类获得窗口属性：
class GUi(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()
    def initUI(self):
        self.setWindowTitle('曹亚慧的计算器')
        self.resize(400,100)

if __name__=='__main__':
    app=QApplication(sys.argv)
    gui=GUi()
    gui.show()
    sys.exit(app.exec_())
    
##添加文本状态栏
class GUi(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle("曹亚慧的计算器")
        self.resize(400,100)
        ##设置状态消息栏文本
        self.statusBar().showMessage("文本状态栏")

if __name__=='__main__':
    app=QApplication(sys.argv)
    gui=GUi()
    gui.show()
    sys.exit(app.exec_())
    
##添加菜单栏
class GUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()
    def initUI(self):
        self.setWindowTitle('Calculator')
        self.resize(400,200)
        self.statusBar().showMessage('文本状态栏')
        ##创建一个菜单栏
        menu=self.menuBar()

        #创建一个菜单
        file_menu=menu.addMenu('文件')
        Setting_menu=menu.addMenu('设置')
        filefile_menu=file_menu.addMenu('文件的文件')

        #创建一个行为
        new_action=QAction('新文件',self)
        #添加一个行为到菜单
        file_menu.addAction(new_action)

        #更新状态栏
        new_action.setStatusTip('新的文件')

if __name__=='__main__':
    app=QApplication(sys.argv)
    gui=GUI()
    gui.show()
    sys.exit(app.exec_())  
    
##修改菜单栏 添加退出窗口
class GUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()
    def initUI(self):
        self.setWindowTitle('Calculator')
        self.resize(400,200)
        self.statusBar().showMessage('文本状态栏')

        ##创建一个菜单栏
        menu=self.menuBar()
        #创建一个菜单
        file_menu=menu.addMenu('文件')
        file_menu.addSeparator()
        edit_menu=menu.addMenu('修改')

        #创建一个行为
        new_action=QAction('新文件',self)
        #添加一个行为到菜单
        file_menu.addAction(new_action)
        #更新状态栏
        new_action.setStatusTip('打开新的文件')

        #创建退出行为
        exit_action=QAction('退出',self)
        #退出操作
        exit_action.setStatusTip("点击退出应用程序")
        #点击关闭程序
        exit_action.triggered.connect(self.close)
        #设置退出快捷键
        exit_action.setShortcut('Ctrl+Q')
        #添加退出行为到菜单上
        file_menu.addAction(exit_action)

if __name__=='__main__':
    app=QApplication(sys.argv)
    gui=GUI()
    gui.show()
    sys.exit(app.exec_())
    


    
    
    
    
    
    
    
    
    
    
    
    
    
    
 
